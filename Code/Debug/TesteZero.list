
TesteZero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800259c  0800259c  0001259c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080025a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  20000004  080025a8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e0  080025a8  000200e0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b3b9  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001959  00000000  00000000  0002b3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000678  00000000  00000000  0002cd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  0002d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000334a  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000217f  00000000  00000000  00030cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00032e41  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000015b0  00000000  00000000  00032ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800253c 	.word	0x0800253c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800253c 	.word	0x0800253c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fc:	6812      	ldr	r2, [r2, #0]
 80003fe:	2110      	movs	r1, #16
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f809 	bl	800041c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800040a:	f001 ff41 	bl	8002290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800040e:	2300      	movs	r3, #0
}
 8000410:	0018      	movs	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40022000 	.word	0x40022000

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000424:	f001 fa04 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 8000428:	0002      	movs	r2, r0
 800042a:	23fa      	movs	r3, #250	; 0xfa
 800042c:	0099      	lsls	r1, r3, #2
 800042e:	0010      	movs	r0, r2
 8000430:	f7ff fe6a 	bl	8000108 <__udivsi3>
 8000434:	0003      	movs	r3, r0
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fbfa 	bl	8000c30 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	2301      	movs	r3, #1
 8000440:	425b      	negs	r3, r3
 8000442:	2200      	movs	r2, #0
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fbdd 	bl	8000c04 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  uwTick++;
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <HAL_IncTick+0x14>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	4b02      	ldr	r3, [pc, #8]	; (8000468 <HAL_IncTick+0x14>)
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000020 	.word	0x20000020

0800046c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  return uwTick;
 8000470:	4b02      	ldr	r3, [pc, #8]	; (800047c <HAL_GetTick+0x10>)
 8000472:	681b      	ldr	r3, [r3, #0]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000020 	.word	0x20000020

08000480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000488:	f7ff fff0 	bl	800046c <HAL_GetTick>
 800048c:	0003      	movs	r3, r0
 800048e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	d002      	beq.n	80004a0 <HAL_Delay+0x20>
  {
     wait++;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3301      	adds	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	f7ff ffe3 	bl	800046c <HAL_GetTick>
 80004a6:	0002      	movs	r2, r0
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1ad2      	subs	r2, r2, r3
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d3f7      	bcc.n	80004a2 <HAL_Delay+0x22>
  {
  }
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b004      	add	sp, #16
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004c4:	230f      	movs	r3, #15
 80004c6:	18fb      	adds	r3, r7, r3
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d101      	bne.n	80004da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
 80004d8:	e124      	b.n	8000724 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d10a      	bne.n	80004f8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2240      	movs	r2, #64	; 0x40
 80004ec:	2100      	movs	r1, #0
 80004ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 ff04 	bl	8002300 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004fc:	2210      	movs	r2, #16
 80004fe:	4013      	ands	r3, r2
 8000500:	d000      	beq.n	8000504 <HAL_ADC_Init+0x48>
 8000502:	e102      	b.n	800070a <HAL_ADC_Init+0x24e>
 8000504:	230f      	movs	r3, #15
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d000      	beq.n	8000510 <HAL_ADC_Init+0x54>
 800050e:	e0fc      	b.n	800070a <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	2204      	movs	r2, #4
 8000518:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800051a:	d000      	beq.n	800051e <HAL_ADC_Init+0x62>
 800051c:	e0f5      	b.n	800070a <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000522:	4a82      	ldr	r2, [pc, #520]	; (800072c <HAL_ADC_Init+0x270>)
 8000524:	4013      	ands	r3, r2
 8000526:	2202      	movs	r2, #2
 8000528:	431a      	orrs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	2203      	movs	r2, #3
 8000536:	4013      	ands	r3, r2
 8000538:	2b01      	cmp	r3, #1
 800053a:	d112      	bne.n	8000562 <HAL_ADC_Init+0xa6>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	2b01      	cmp	r3, #1
 8000548:	d009      	beq.n	800055e <HAL_ADC_Init+0xa2>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	021b      	lsls	r3, r3, #8
 8000554:	401a      	ands	r2, r3
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	429a      	cmp	r2, r3
 800055c:	d101      	bne.n	8000562 <HAL_ADC_Init+0xa6>
 800055e:	2301      	movs	r3, #1
 8000560:	e000      	b.n	8000564 <HAL_ADC_Init+0xa8>
 8000562:	2300      	movs	r3, #0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d116      	bne.n	8000596 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	6812      	ldr	r2, [r2, #0]
 8000570:	68d2      	ldr	r2, [r2, #12]
 8000572:	2118      	movs	r1, #24
 8000574:	438a      	bics	r2, r1
 8000576:	0011      	movs	r1, r2
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	6892      	ldr	r2, [r2, #8]
 800057c:	430a      	orrs	r2, r1
 800057e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	6912      	ldr	r2, [r2, #16]
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	0891      	lsrs	r1, r2, #2
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	6852      	ldr	r2, [r2, #4]
 8000592:	430a      	orrs	r2, r1
 8000594:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	68d2      	ldr	r2, [r2, #12]
 80005a0:	4963      	ldr	r1, [pc, #396]	; (8000730 <HAL_ADC_Init+0x274>)
 80005a2:	400a      	ands	r2, r1
 80005a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80005b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80005ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d002      	beq.n	80005ca <HAL_ADC_Init+0x10e>
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	015b      	lsls	r3, r3, #5
 80005c8:	e000      	b.n	80005cc <HAL_ADC_Init+0x110>
 80005ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80005cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80005d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d101      	bne.n	80005e0 <HAL_ADC_Init+0x124>
 80005dc:	2304      	movs	r3, #4
 80005de:	e000      	b.n	80005e2 <HAL_ADC_Init+0x126>
 80005e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80005e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005ea:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d115      	bne.n	8000626 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6a1b      	ldr	r3, [r3, #32]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d105      	bne.n	800060e <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	0252      	lsls	r2, r2, #9
 8000608:	4313      	orrs	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	e00b      	b.n	8000626 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	2220      	movs	r2, #32
 8000614:	431a      	orrs	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800061e:	2201      	movs	r2, #1
 8000620:	431a      	orrs	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800062a:	23c2      	movs	r3, #194	; 0xc2
 800062c:	33ff      	adds	r3, #255	; 0xff
 800062e:	429a      	cmp	r2, r3
 8000630:	d007      	beq.n	8000642 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800063a:	4313      	orrs	r3, r2
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	4313      	orrs	r3, r2
 8000640:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	68d1      	ldr	r1, [r2, #12]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	430a      	orrs	r2, r1
 8000650:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000656:	2380      	movs	r3, #128	; 0x80
 8000658:	055b      	lsls	r3, r3, #21
 800065a:	429a      	cmp	r2, r3
 800065c:	d01b      	beq.n	8000696 <HAL_ADC_Init+0x1da>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000662:	2b01      	cmp	r3, #1
 8000664:	d017      	beq.n	8000696 <HAL_ADC_Init+0x1da>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800066a:	2b02      	cmp	r3, #2
 800066c:	d013      	beq.n	8000696 <HAL_ADC_Init+0x1da>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000672:	2b03      	cmp	r3, #3
 8000674:	d00f      	beq.n	8000696 <HAL_ADC_Init+0x1da>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067a:	2b04      	cmp	r3, #4
 800067c:	d00b      	beq.n	8000696 <HAL_ADC_Init+0x1da>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000682:	2b05      	cmp	r3, #5
 8000684:	d007      	beq.n	8000696 <HAL_ADC_Init+0x1da>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800068a:	2b06      	cmp	r3, #6
 800068c:	d003      	beq.n	8000696 <HAL_ADC_Init+0x1da>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000692:	2b07      	cmp	r3, #7
 8000694:	d112      	bne.n	80006bc <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	6952      	ldr	r2, [r2, #20]
 80006a0:	2107      	movs	r1, #7
 80006a2:	438a      	bics	r2, r1
 80006a4:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	6812      	ldr	r2, [r2, #0]
 80006ae:	6951      	ldr	r1, [r2, #20]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80006b4:	2007      	movs	r0, #7
 80006b6:	4002      	ands	r2, r0
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <HAL_ADC_Init+0x278>)
 80006c4:	401a      	ands	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d10b      	bne.n	80006e4 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	2203      	movs	r2, #3
 80006d8:	4393      	bics	r3, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	431a      	orrs	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80006e2:	e01c      	b.n	800071e <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e8:	2212      	movs	r2, #18
 80006ea:	4393      	bics	r3, r2
 80006ec:	2210      	movs	r2, #16
 80006ee:	431a      	orrs	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f8:	2201      	movs	r2, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000700:	230f      	movs	r3, #15
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000708:	e009      	b.n	800071e <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	2210      	movs	r2, #16
 8000710:	431a      	orrs	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000716:	230f      	movs	r3, #15
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800071e:	230f      	movs	r3, #15
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	781b      	ldrb	r3, [r3, #0]
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bd80      	pop	{r7, pc}
 800072c:	fffffefd 	.word	0xfffffefd
 8000730:	fffe0219 	.word	0xfffe0219
 8000734:	833fffe7 	.word	0x833fffe7

08000738 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000740:	230f      	movs	r3, #15
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	2204      	movs	r2, #4
 8000750:	4013      	ands	r3, r2
 8000752:	d138      	bne.n	80007c6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2240      	movs	r2, #64	; 0x40
 8000758:	5c9b      	ldrb	r3, [r3, r2]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d101      	bne.n	8000762 <HAL_ADC_Start+0x2a>
 800075e:	2302      	movs	r3, #2
 8000760:	e038      	b.n	80007d4 <HAL_ADC_Start+0x9c>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2240      	movs	r2, #64	; 0x40
 8000766:	2101      	movs	r1, #1
 8000768:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d007      	beq.n	8000782 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000772:	230f      	movs	r3, #15
 8000774:	18fc      	adds	r4, r7, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	0018      	movs	r0, r3
 800077a:	f000 f935 	bl	80009e8 <ADC_Enable>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000782:	230f      	movs	r3, #15
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d120      	bne.n	80007ce <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <HAL_ADC_Start+0xa4>)
 8000792:	4013      	ands	r3, r2
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	431a      	orrs	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2240      	movs	r2, #64	; 0x40
 80007a8:	2100      	movs	r1, #0
 80007aa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	221c      	movs	r2, #28
 80007b2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	6892      	ldr	r2, [r2, #8]
 80007be:	2104      	movs	r1, #4
 80007c0:	430a      	orrs	r2, r1
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	e003      	b.n	80007ce <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80007c6:	230f      	movs	r3, #15
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	2202      	movs	r2, #2
 80007cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	781b      	ldrb	r3, [r3, #0]
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b005      	add	sp, #20
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	fffff0fe 	.word	0xfffff0fe

080007e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80007ee:	0018      	movs	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000802:	230f      	movs	r3, #15
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	055b      	lsls	r3, r3, #21
 8000816:	429a      	cmp	r2, r3
 8000818:	d011      	beq.n	800083e <HAL_ADC_ConfigChannel+0x46>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081e:	2b01      	cmp	r3, #1
 8000820:	d00d      	beq.n	800083e <HAL_ADC_ConfigChannel+0x46>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000826:	2b02      	cmp	r3, #2
 8000828:	d009      	beq.n	800083e <HAL_ADC_ConfigChannel+0x46>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082e:	2b03      	cmp	r3, #3
 8000830:	d005      	beq.n	800083e <HAL_ADC_ConfigChannel+0x46>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000836:	2b04      	cmp	r3, #4
 8000838:	d001      	beq.n	800083e <HAL_ADC_ConfigChannel+0x46>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2240      	movs	r2, #64	; 0x40
 8000842:	5c9b      	ldrb	r3, [r3, r2]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d101      	bne.n	800084c <HAL_ADC_ConfigChannel+0x54>
 8000848:	2302      	movs	r3, #2
 800084a:	e0bc      	b.n	80009c6 <HAL_ADC_ConfigChannel+0x1ce>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2240      	movs	r2, #64	; 0x40
 8000850:	2101      	movs	r1, #1
 8000852:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2204      	movs	r2, #4
 800085c:	4013      	ands	r3, r2
 800085e:	d000      	beq.n	8000862 <HAL_ADC_ConfigChannel+0x6a>
 8000860:	e0a0      	b.n	80009a4 <HAL_ADC_ConfigChannel+0x1ac>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	4a5a      	ldr	r2, [pc, #360]	; (80009d0 <HAL_ADC_ConfigChannel+0x1d8>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d100      	bne.n	800086e <HAL_ADC_ConfigChannel+0x76>
 800086c:	e078      	b.n	8000960 <HAL_ADC_ConfigChannel+0x168>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	2001      	movs	r0, #1
 800087e:	4090      	lsls	r0, r2
 8000880:	0002      	movs	r2, r0
 8000882:	430a      	orrs	r2, r1
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	055b      	lsls	r3, r3, #21
 800088e:	429a      	cmp	r2, r3
 8000890:	d037      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000896:	2b01      	cmp	r3, #1
 8000898:	d033      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d02f      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d02b      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d027      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d023      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d01f      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	2b07      	cmp	r3, #7
 80008c8:	d01b      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	2107      	movs	r1, #7
 80008d6:	400b      	ands	r3, r1
 80008d8:	429a      	cmp	r2, r3
 80008da:	d012      	beq.n	8000902 <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	6952      	ldr	r2, [r2, #20]
 80008e6:	2107      	movs	r1, #7
 80008e8:	438a      	bics	r2, r1
 80008ea:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	6951      	ldr	r1, [r2, #20]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	6892      	ldr	r2, [r2, #8]
 80008fa:	2007      	movs	r0, #7
 80008fc:	4002      	ands	r2, r0
 80008fe:	430a      	orrs	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b10      	cmp	r3, #16
 8000908:	d003      	beq.n	8000912 <HAL_ADC_ConfigChannel+0x11a>
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b11      	cmp	r3, #17
 8000910:	d152      	bne.n	80009b8 <HAL_ADC_ConfigChannel+0x1c0>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000912:	4a30      	ldr	r2, [pc, #192]	; (80009d4 <HAL_ADC_ConfigChannel+0x1dc>)
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <HAL_ADC_ConfigChannel+0x1dc>)
 8000916:	6819      	ldr	r1, [r3, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b10      	cmp	r3, #16
 800091e:	d102      	bne.n	8000926 <HAL_ADC_ConfigChannel+0x12e>
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	041b      	lsls	r3, r3, #16
 8000924:	e001      	b.n	800092a <HAL_ADC_ConfigChannel+0x132>
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	03db      	lsls	r3, r3, #15
 800092a:	430b      	orrs	r3, r1
 800092c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b10      	cmp	r3, #16
 8000934:	d140      	bne.n	80009b8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_ADC_ConfigChannel+0x1e0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4928      	ldr	r1, [pc, #160]	; (80009dc <HAL_ADC_ConfigChannel+0x1e4>)
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fbe3 	bl	8000108 <__udivsi3>
 8000942:	0003      	movs	r3, r0
 8000944:	001a      	movs	r2, r3
 8000946:	0013      	movs	r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	189b      	adds	r3, r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000950:	e002      	b.n	8000958 <HAL_ADC_ConfigChannel+0x160>
          {
            wait_loop_index--;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3b01      	subs	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f9      	bne.n	8000952 <HAL_ADC_ConfigChannel+0x15a>
 800095e:	e02b      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x1c0>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	6812      	ldr	r2, [r2, #0]
 8000968:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	2001      	movs	r0, #1
 8000970:	4090      	lsls	r0, r2
 8000972:	0002      	movs	r2, r0
 8000974:	43d2      	mvns	r2, r2
 8000976:	400a      	ands	r2, r1
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b10      	cmp	r3, #16
 8000980:	d003      	beq.n	800098a <HAL_ADC_ConfigChannel+0x192>
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b11      	cmp	r3, #17
 8000988:	d116      	bne.n	80009b8 <HAL_ADC_ConfigChannel+0x1c0>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <HAL_ADC_ConfigChannel+0x1dc>)
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_ADC_ConfigChannel+0x1dc>)
 800098e:	6819      	ldr	r1, [r3, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b10      	cmp	r3, #16
 8000996:	d101      	bne.n	800099c <HAL_ADC_ConfigChannel+0x1a4>
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_ADC_ConfigChannel+0x1e8>)
 800099a:	e000      	b.n	800099e <HAL_ADC_ConfigChannel+0x1a6>
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_ADC_ConfigChannel+0x1ec>)
 800099e:	400b      	ands	r3, r1
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e009      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x1c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	2220      	movs	r2, #32
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80009b0:	230f      	movs	r3, #15
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2240      	movs	r2, #64	; 0x40
 80009bc:	2100      	movs	r1, #0
 80009be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	00001001 	.word	0x00001001
 80009d4:	40012708 	.word	0x40012708
 80009d8:	20000000 	.word	0x20000000
 80009dc:	000f4240 	.word	0x000f4240
 80009e0:	ff7fffff 	.word	0xff7fffff
 80009e4:	ffbfffff 	.word	0xffbfffff

080009e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	2203      	movs	r2, #3
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d112      	bne.n	8000a2c <ADC_Enable+0x44>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d009      	beq.n	8000a28 <ADC_Enable+0x40>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	401a      	ands	r2, r3
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	021b      	lsls	r3, r3, #8
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d101      	bne.n	8000a2c <ADC_Enable+0x44>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <ADC_Enable+0x46>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14b      	bne.n	8000aca <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	4a26      	ldr	r2, [pc, #152]	; (8000ad4 <ADC_Enable+0xec>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d00d      	beq.n	8000a5a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	2210      	movs	r2, #16
 8000a44:	431a      	orrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a4e:	2201      	movs	r2, #1
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e038      	b.n	8000acc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	6812      	ldr	r2, [r2, #0]
 8000a62:	6892      	ldr	r2, [r2, #8]
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <ADC_Enable+0xf0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	491b      	ldr	r1, [pc, #108]	; (8000adc <ADC_Enable+0xf4>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fb49 	bl	8000108 <__udivsi3>
 8000a76:	0003      	movs	r3, r0
 8000a78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a7a:	e002      	b.n	8000a82 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1f9      	bne.n	8000a7c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a88:	f7ff fcf0 	bl	800046c <HAL_GetTick>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a90:	e014      	b.n	8000abc <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000a92:	f7ff fceb 	bl	800046c <HAL_GetTick>
 8000a96:	0002      	movs	r2, r0
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d90d      	bls.n	8000abc <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e007      	b.n	8000acc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1e3      	bne.n	8000a92 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b004      	add	sp, #16
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	80000017 	.word	0x80000017
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	000f4240 	.word	0x000f4240

08000ae0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b5b0      	push	{r4, r5, r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b7f      	cmp	r3, #127	; 0x7f
 8000af4:	d932      	bls.n	8000b5c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af6:	4c2f      	ldr	r4, [pc, #188]	; (8000bb4 <NVIC_SetPriority+0xd4>)
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	230f      	movs	r3, #15
 8000b00:	4013      	ands	r3, r2
 8000b02:	3b08      	subs	r3, #8
 8000b04:	0899      	lsrs	r1, r3, #2
 8000b06:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <NVIC_SetPriority+0xd4>)
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	230f      	movs	r3, #15
 8000b10:	4003      	ands	r3, r0
 8000b12:	3b08      	subs	r3, #8
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3306      	adds	r3, #6
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	1dfa      	adds	r2, r7, #7
 8000b22:	7812      	ldrb	r2, [r2, #0]
 8000b24:	0010      	movs	r0, r2
 8000b26:	2203      	movs	r2, #3
 8000b28:	4002      	ands	r2, r0
 8000b2a:	00d2      	lsls	r2, r2, #3
 8000b2c:	20ff      	movs	r0, #255	; 0xff
 8000b2e:	4090      	lsls	r0, r2
 8000b30:	0002      	movs	r2, r0
 8000b32:	43d2      	mvns	r2, r2
 8000b34:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	019b      	lsls	r3, r3, #6
 8000b3a:	20ff      	movs	r0, #255	; 0xff
 8000b3c:	4018      	ands	r0, r3
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	001d      	movs	r5, r3
 8000b44:	2303      	movs	r3, #3
 8000b46:	402b      	ands	r3, r5
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	4098      	lsls	r0, r3
 8000b4c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	1d8b      	adds	r3, r1, #6
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	18e3      	adds	r3, r4, r3
 8000b56:	3304      	adds	r3, #4
 8000b58:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b5a:	e027      	b.n	8000bac <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	4c16      	ldr	r4, [pc, #88]	; (8000bb8 <NVIC_SetPriority+0xd8>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	4914      	ldr	r1, [pc, #80]	; (8000bb8 <NVIC_SetPriority+0xd8>)
 8000b68:	1dfa      	adds	r2, r7, #7
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	b252      	sxtb	r2, r2
 8000b6e:	0892      	lsrs	r2, r2, #2
 8000b70:	32c0      	adds	r2, #192	; 0xc0
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	5852      	ldr	r2, [r2, r1]
 8000b76:	1df9      	adds	r1, r7, #7
 8000b78:	7809      	ldrb	r1, [r1, #0]
 8000b7a:	0008      	movs	r0, r1
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	4001      	ands	r1, r0
 8000b80:	00c9      	lsls	r1, r1, #3
 8000b82:	20ff      	movs	r0, #255	; 0xff
 8000b84:	4088      	lsls	r0, r1
 8000b86:	0001      	movs	r1, r0
 8000b88:	43c9      	mvns	r1, r1
 8000b8a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	0192      	lsls	r2, r2, #6
 8000b90:	20ff      	movs	r0, #255	; 0xff
 8000b92:	4010      	ands	r0, r2
 8000b94:	1dfa      	adds	r2, r7, #7
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	0015      	movs	r5, r2
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	402a      	ands	r2, r5
 8000b9e:	00d2      	lsls	r2, r2, #3
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	33c0      	adds	r3, #192	; 0xc0
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	511a      	str	r2, [r3, r4]
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb4:	e000ed00 	.word	0xe000ed00
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <SysTick_Config+0x40>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d901      	bls.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e010      	b.n	8000bf4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <SysTick_Config+0x44>)
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	3a01      	subs	r2, #1
 8000bd8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	2103      	movs	r1, #3
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff7d 	bl	8000ae0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SysTick_Config+0x44>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x44>)
 8000bee:	2207      	movs	r2, #7
 8000bf0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	00ffffff 	.word	0x00ffffff
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	230f      	movs	r3, #15
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	1c02      	adds	r2, r0, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff ff5c 	bl	8000ae0 <NVIC_SetPriority>
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b004      	add	sp, #16
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ffbe 	bl	8000bbc <SysTick_Config>
 8000c40:	0003      	movs	r3, r0
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d106      	bne.n	8000c68 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	2104      	movs	r1, #4
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c66:	e005      	b.n	8000c74 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000c6c:	6812      	ldr	r2, [r2, #0]
 8000c6e:	2104      	movs	r1, #4
 8000c70:	438a      	bics	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b002      	add	sp, #8
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c84:	f000 f803 	bl	8000c8e <HAL_SYSTICK_Callback>
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cae:	e14f      	b.n	8000f50 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <HAL_GPIO_Init+0x30>
 8000cc6:	e140      	b.n	8000f4a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x40>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b12      	cmp	r3, #18
 8000cd6:	d123      	bne.n	8000d20 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	58d3      	ldr	r3, [r2, r3]
 8000ce4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2207      	movs	r2, #7
 8000cea:	4013      	ands	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	43da      	mvns	r2, r3
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2107      	movs	r1, #7
 8000d04:	400b      	ands	r3, r1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	6939      	ldr	r1, [r7, #16]
 8000d1e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	43da      	mvns	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d00b      	beq.n	8000d74 <HAL_GPIO_Init+0xdc>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	2b11      	cmp	r3, #17
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b12      	cmp	r3, #18
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	409a      	lsls	r2, r3
 8000d82:	0013      	movs	r3, r2
 8000d84:	43da      	mvns	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	43da      	mvns	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	055b      	lsls	r3, r3, #21
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d100      	bne.n	8000e14 <HAL_GPIO_Init+0x17c>
 8000e12:	e09a      	b.n	8000f4a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b54      	ldr	r3, [pc, #336]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e16:	4a54      	ldr	r2, [pc, #336]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e18:	6992      	ldr	r2, [r2, #24]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	619a      	str	r2, [r3, #24]
 8000e20:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4013      	ands	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000e2c:	4a4f      	ldr	r2, [pc, #316]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	589b      	ldr	r3, [r3, r2]
 8000e38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4013      	ands	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	409a      	lsls	r2, r3
 8000e46:	0013      	movs	r3, r2
 8000e48:	43da      	mvns	r2, r3
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	2390      	movs	r3, #144	; 0x90
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x1ea>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <HAL_GPIO_Init+0x2d8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x1e6>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a43      	ldr	r2, [pc, #268]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a42      	ldr	r2, [pc, #264]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x1de>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e76:	2305      	movs	r3, #5
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e82:	2300      	movs	r3, #0
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	2103      	movs	r1, #3
 8000e88:	400a      	ands	r2, r1
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e94:	4935      	ldr	r1, [pc, #212]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	025b      	lsls	r3, r3, #9
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	029b      	lsls	r3, r3, #10
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	035b      	lsls	r3, r3, #13
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43da      	mvns	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	039b      	lsls	r3, r3, #14
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	40da      	lsrs	r2, r3
 8000f58:	1e13      	subs	r3, r2, #0
 8000f5a:	d000      	beq.n	8000f5e <HAL_GPIO_Init+0x2c6>
 8000f5c:	e6a8      	b.n	8000cb0 <HAL_GPIO_Init+0x18>
  } 
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b006      	add	sp, #24
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	48000400 	.word	0x48000400
 8000f74:	48000800 	.word	0x48000800
 8000f78:	48000c00 	.word	0x48000c00
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	0008      	movs	r0, r1
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	1cbb      	adds	r3, r7, #2
 8000f8e:	1c02      	adds	r2, r0, #0
 8000f90:	801a      	strh	r2, [r3, #0]
 8000f92:	1c7b      	adds	r3, r7, #1
 8000f94:	1c0a      	adds	r2, r1, #0
 8000f96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f98:	1c7b      	adds	r3, r7, #1
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa0:	1cbb      	adds	r3, r7, #2
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000faa:	1cbb      	adds	r3, r7, #2
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x18>
 8000fd2:	e08d      	b.n	80010f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fd4:	4bc3      	ldr	r3, [pc, #780]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	220c      	movs	r2, #12
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d00e      	beq.n	8000ffe <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe0:	4bc0      	ldr	r3, [pc, #768]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d116      	bne.n	800101a <HAL_RCC_OscConfig+0x5e>
 8000fec:	4bbd      	ldr	r3, [pc, #756]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d10d      	bne.n	800101a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffe:	4bb9      	ldr	r3, [pc, #740]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	029b      	lsls	r3, r3, #10
 8001006:	4013      	ands	r3, r2
 8001008:	d100      	bne.n	800100c <HAL_RCC_OscConfig+0x50>
 800100a:	e070      	b.n	80010ee <HAL_RCC_OscConfig+0x132>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d000      	beq.n	8001016 <HAL_RCC_OscConfig+0x5a>
 8001014:	e06b      	b.n	80010ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e2b5      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d107      	bne.n	8001032 <HAL_RCC_OscConfig+0x76>
 8001022:	4bb0      	ldr	r3, [pc, #704]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001024:	4aaf      	ldr	r2, [pc, #700]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0249      	lsls	r1, r1, #9
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e02f      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0x98>
 800103a:	4baa      	ldr	r3, [pc, #680]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800103c:	4aa9      	ldr	r2, [pc, #676]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	49a9      	ldr	r1, [pc, #676]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001042:	400a      	ands	r2, r1
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	4ba7      	ldr	r3, [pc, #668]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001048:	4aa6      	ldr	r2, [pc, #664]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	49a7      	ldr	r1, [pc, #668]	; (80012ec <HAL_RCC_OscConfig+0x330>)
 800104e:	400a      	ands	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e01e      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b05      	cmp	r3, #5
 800105a:	d10e      	bne.n	800107a <HAL_RCC_OscConfig+0xbe>
 800105c:	4ba1      	ldr	r3, [pc, #644]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800105e:	4aa1      	ldr	r2, [pc, #644]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	02c9      	lsls	r1, r1, #11
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	4b9e      	ldr	r3, [pc, #632]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800106c:	4a9d      	ldr	r2, [pc, #628]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	0249      	lsls	r1, r1, #9
 8001074:	430a      	orrs	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e00b      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
 800107a:	4b9a      	ldr	r3, [pc, #616]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800107c:	4a99      	ldr	r2, [pc, #612]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	4999      	ldr	r1, [pc, #612]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001082:	400a      	ands	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	4b97      	ldr	r3, [pc, #604]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001088:	4a96      	ldr	r2, [pc, #600]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	4997      	ldr	r1, [pc, #604]	; (80012ec <HAL_RCC_OscConfig+0x330>)
 800108e:	400a      	ands	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d014      	beq.n	80010c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff f9e7 	bl	800046c <HAL_GetTick>
 800109e:	0003      	movs	r3, r0
 80010a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff f9e2 	bl	800046c <HAL_GetTick>
 80010a8:	0002      	movs	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	; 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e267      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4b8b      	ldr	r3, [pc, #556]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	029b      	lsls	r3, r3, #10
 80010be:	4013      	ands	r3, r2
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0xe8>
 80010c2:	e015      	b.n	80010f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff f9d2 	bl	800046c <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ce:	f7ff f9cd 	bl	800046c <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b64      	cmp	r3, #100	; 0x64
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e252      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e0:	4b80      	ldr	r3, [pc, #512]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	029b      	lsls	r3, r3, #10
 80010e8:	4013      	ands	r3, r2
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x112>
 80010ec:	e000      	b.n	80010f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2202      	movs	r2, #2
 80010f6:	4013      	ands	r3, r2
 80010f8:	d100      	bne.n	80010fc <HAL_RCC_OscConfig+0x140>
 80010fa:	e069      	b.n	80011d0 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010fc:	4b79      	ldr	r3, [pc, #484]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	220c      	movs	r2, #12
 8001102:	4013      	ands	r3, r2
 8001104:	d00b      	beq.n	800111e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001106:	4b77      	ldr	r3, [pc, #476]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	220c      	movs	r2, #12
 800110c:	4013      	ands	r3, r2
 800110e:	2b08      	cmp	r3, #8
 8001110:	d11c      	bne.n	800114c <HAL_RCC_OscConfig+0x190>
 8001112:	4b74      	ldr	r3, [pc, #464]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	4013      	ands	r3, r2
 800111c:	d116      	bne.n	800114c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	4b71      	ldr	r3, [pc, #452]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d005      	beq.n	8001134 <HAL_RCC_OscConfig+0x178>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d001      	beq.n	8001134 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e228      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001134:	4a6b      	ldr	r2, [pc, #428]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001136:	4b6b      	ldr	r3, [pc, #428]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	21f8      	movs	r1, #248	; 0xf8
 800113c:	438b      	bics	r3, r1
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	430b      	orrs	r3, r1
 8001148:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	e041      	b.n	80011d0 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d024      	beq.n	800119e <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001154:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001156:	4a63      	ldr	r2, [pc, #396]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	2101      	movs	r1, #1
 800115c:	430a      	orrs	r2, r1
 800115e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff f984 	bl	800046c <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff f97f 	bl	800046c <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e204      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d0f1      	beq.n	800116a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001186:	4a57      	ldr	r2, [pc, #348]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	21f8      	movs	r1, #248	; 0xf8
 800118e:	438b      	bics	r3, r1
 8001190:	0019      	movs	r1, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	430b      	orrs	r3, r1
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e018      	b.n	80011d0 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	438a      	bics	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff f95f 	bl	800046c <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b4:	f7ff f95a 	bl	800046c <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1df      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d1f1      	bne.n	80011b4 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2208      	movs	r2, #8
 80011d6:	4013      	ands	r3, r2
 80011d8:	d036      	beq.n	8001248 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d019      	beq.n	8001216 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e2:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80011e4:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80011e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011e8:	2101      	movs	r1, #1
 80011ea:	430a      	orrs	r2, r1
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff f93d 	bl	800046c <HAL_GetTick>
 80011f2:	0003      	movs	r3, r0
 80011f4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff f938 	bl	800046c <HAL_GetTick>
 80011fc:	0002      	movs	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e1bd      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	2202      	movs	r2, #2
 8001210:	4013      	ands	r3, r2
 8001212:	d0f1      	beq.n	80011f8 <HAL_RCC_OscConfig+0x23c>
 8001214:	e018      	b.n	8001248 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001216:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001218:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800121a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800121c:	2101      	movs	r1, #1
 800121e:	438a      	bics	r2, r1
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff f923 	bl	800046c <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff f91e 	bl	800046c <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1a3      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	2202      	movs	r2, #2
 8001244:	4013      	ands	r3, r2
 8001246:	d1f1      	bne.n	800122c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2204      	movs	r2, #4
 800124e:	4013      	ands	r3, r2
 8001250:	d100      	bne.n	8001254 <HAL_RCC_OscConfig+0x298>
 8001252:	e0b5      	b.n	80013c0 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001254:	2317      	movs	r3, #23
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800125e:	69da      	ldr	r2, [r3, #28]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	055b      	lsls	r3, r3, #21
 8001264:	4013      	ands	r3, r2
 8001266:	d111      	bne.n	800128c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800126a:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 800126c:	69d2      	ldr	r2, [r2, #28]
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	0549      	lsls	r1, r1, #21
 8001272:	430a      	orrs	r2, r1
 8001274:	61da      	str	r2, [r3, #28]
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 8001278:	69da      	ldr	r2, [r3, #28]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	055b      	lsls	r3, r3, #21
 800127e:	4013      	ands	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001284:	2317      	movs	r3, #23
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_RCC_OscConfig+0x334>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4013      	ands	r3, r2
 8001296:	d11a      	bne.n	80012ce <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_RCC_OscConfig+0x334>)
 800129a:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <HAL_RCC_OscConfig+0x334>)
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0049      	lsls	r1, r1, #1
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a6:	f7ff f8e1 	bl	800046c <HAL_GetTick>
 80012aa:	0003      	movs	r3, r0
 80012ac:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b0:	f7ff f8dc 	bl	800046c <HAL_GetTick>
 80012b4:	0002      	movs	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e161      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_RCC_OscConfig+0x334>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10e      	bne.n	80012f4 <HAL_RCC_OscConfig+0x338>
 80012d6:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80012d8:	4a02      	ldr	r2, [pc, #8]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80012da:	6a12      	ldr	r2, [r2, #32]
 80012dc:	2101      	movs	r1, #1
 80012de:	430a      	orrs	r2, r1
 80012e0:	621a      	str	r2, [r3, #32]
 80012e2:	e035      	b.n	8001350 <HAL_RCC_OscConfig+0x394>
 80012e4:	40021000 	.word	0x40021000
 80012e8:	fffeffff 	.word	0xfffeffff
 80012ec:	fffbffff 	.word	0xfffbffff
 80012f0:	40007000 	.word	0x40007000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10c      	bne.n	8001316 <HAL_RCC_OscConfig+0x35a>
 80012fc:	4ba4      	ldr	r3, [pc, #656]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80012fe:	4aa4      	ldr	r2, [pc, #656]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001300:	6a12      	ldr	r2, [r2, #32]
 8001302:	2101      	movs	r1, #1
 8001304:	438a      	bics	r2, r1
 8001306:	621a      	str	r2, [r3, #32]
 8001308:	4ba1      	ldr	r3, [pc, #644]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800130a:	4aa1      	ldr	r2, [pc, #644]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800130c:	6a12      	ldr	r2, [r2, #32]
 800130e:	2104      	movs	r1, #4
 8001310:	438a      	bics	r2, r1
 8001312:	621a      	str	r2, [r3, #32]
 8001314:	e01c      	b.n	8001350 <HAL_RCC_OscConfig+0x394>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x37c>
 800131e:	4b9c      	ldr	r3, [pc, #624]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001320:	4a9b      	ldr	r2, [pc, #620]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001322:	6a12      	ldr	r2, [r2, #32]
 8001324:	2104      	movs	r1, #4
 8001326:	430a      	orrs	r2, r1
 8001328:	621a      	str	r2, [r3, #32]
 800132a:	4b99      	ldr	r3, [pc, #612]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800132c:	4a98      	ldr	r2, [pc, #608]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800132e:	6a12      	ldr	r2, [r2, #32]
 8001330:	2101      	movs	r1, #1
 8001332:	430a      	orrs	r2, r1
 8001334:	621a      	str	r2, [r3, #32]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0x394>
 8001338:	4b95      	ldr	r3, [pc, #596]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800133a:	4a95      	ldr	r2, [pc, #596]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800133c:	6a12      	ldr	r2, [r2, #32]
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	621a      	str	r2, [r3, #32]
 8001344:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001346:	4a92      	ldr	r2, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001348:	6a12      	ldr	r2, [r2, #32]
 800134a:	2104      	movs	r1, #4
 800134c:	438a      	bics	r2, r1
 800134e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d014      	beq.n	8001382 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001358:	f7ff f888 	bl	800046c <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001360:	e009      	b.n	8001376 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff f883 	bl	800046c <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4a89      	ldr	r2, [pc, #548]	; (8001594 <HAL_RCC_OscConfig+0x5d8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e107      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001376:	4b86      	ldr	r3, [pc, #536]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	2202      	movs	r2, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x3a6>
 8001380:	e013      	b.n	80013aa <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff f873 	bl	800046c <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138a:	e009      	b.n	80013a0 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138c:	f7ff f86e 	bl	800046c <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <HAL_RCC_OscConfig+0x5d8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0f2      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013aa:	2317      	movs	r3, #23
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d105      	bne.n	80013c0 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80013b6:	4a76      	ldr	r2, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80013b8:	69d2      	ldr	r2, [r2, #28]
 80013ba:	4977      	ldr	r1, [pc, #476]	; (8001598 <HAL_RCC_OscConfig+0x5dc>)
 80013bc:	400a      	ands	r2, r1
 80013be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2210      	movs	r2, #16
 80013c6:	4013      	ands	r3, r2
 80013c8:	d063      	beq.n	8001492 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d12a      	bne.n	8001428 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013d2:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80013d4:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80013d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013d8:	2104      	movs	r1, #4
 80013da:	430a      	orrs	r2, r1
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013de:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80013e0:	4a6b      	ldr	r2, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80013e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013e4:	2101      	movs	r1, #1
 80013e6:	430a      	orrs	r2, r1
 80013e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff f83f 	bl	800046c <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013f4:	f7ff f83a 	bl	800046c <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e0bf      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001406:	4b62      	ldr	r3, [pc, #392]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d0f1      	beq.n	80013f4 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001410:	4a5f      	ldr	r2, [pc, #380]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001412:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	21f8      	movs	r1, #248	; 0xf8
 8001418:	438b      	bics	r3, r1
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	430b      	orrs	r3, r1
 8001424:	6353      	str	r3, [r2, #52]	; 0x34
 8001426:	e034      	b.n	8001492 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	3305      	adds	r3, #5
 800142e:	d111      	bne.n	8001454 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001430:	4b57      	ldr	r3, [pc, #348]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001432:	4a57      	ldr	r2, [pc, #348]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001434:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001436:	2104      	movs	r1, #4
 8001438:	438a      	bics	r2, r1
 800143a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800143c:	4a54      	ldr	r2, [pc, #336]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800143e:	4b54      	ldr	r3, [pc, #336]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	21f8      	movs	r1, #248	; 0xf8
 8001444:	438b      	bics	r3, r1
 8001446:	0019      	movs	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	430b      	orrs	r3, r1
 8001450:	6353      	str	r3, [r2, #52]	; 0x34
 8001452:	e01e      	b.n	8001492 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001456:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001458:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800145a:	2104      	movs	r1, #4
 800145c:	430a      	orrs	r2, r1
 800145e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001460:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001462:	4a4b      	ldr	r2, [pc, #300]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001464:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001466:	2101      	movs	r1, #1
 8001468:	438a      	bics	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7fe fffe 	bl	800046c <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001476:	f7fe fff9 	bl	800046c <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e07e      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001488:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800148a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d1f1      	bne.n	8001476 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <HAL_RCC_OscConfig+0x4e0>
 800149a:	e073      	b.n	8001584 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800149c:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	220c      	movs	r2, #12
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d100      	bne.n	80014aa <HAL_RCC_OscConfig+0x4ee>
 80014a8:	e06a      	b.n	8001580 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d14b      	bne.n	800154a <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80014b4:	4a36      	ldr	r2, [pc, #216]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	4938      	ldr	r1, [pc, #224]	; (800159c <HAL_RCC_OscConfig+0x5e0>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7fe ffd5 	bl	800046c <HAL_GetTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7fe ffd0 	bl	800046c <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e055      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	049b      	lsls	r3, r3, #18
 80014e2:	4013      	ands	r3, r2
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e6:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	210f      	movs	r1, #15
 80014ee:	438b      	bics	r3, r1
 80014f0:	0019      	movs	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	430b      	orrs	r3, r1
 80014f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014fa:	4a25      	ldr	r2, [pc, #148]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4927      	ldr	r1, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x5e4>)
 8001502:	4019      	ands	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	4303      	orrs	r3, r0
 800150e:	430b      	orrs	r3, r1
 8001510:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	0449      	lsls	r1, r1, #17
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7fe ffa4 	bl	800046c <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7fe ff9f 	bl	800046c <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e024      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	049b      	lsls	r3, r3, #18
 8001544:	4013      	ands	r3, r2
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x56e>
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800154c:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	4912      	ldr	r1, [pc, #72]	; (800159c <HAL_RCC_OscConfig+0x5e0>)
 8001552:	400a      	ands	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7fe ff89 	bl	800046c <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7fe ff84 	bl	800046c <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e009      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_RCC_OscConfig+0x5d4>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	049b      	lsls	r3, r3, #18
 800157a:	4013      	ands	r3, r2
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x5a4>
 800157e:	e001      	b.n	8001584 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b006      	add	sp, #24
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40021000 	.word	0x40021000
 8001594:	00001388 	.word	0x00001388
 8001598:	efffffff 	.word	0xefffffff
 800159c:	feffffff 	.word	0xfeffffff
 80015a0:	ffc2ffff 	.word	0xffc2ffff

080015a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015b2:	4b69      	ldr	r3, [pc, #420]	; (8001758 <HAL_RCC_ClockConfig+0x1b4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	401a      	ands	r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d211      	bcs.n	80015e4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c0:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_RCC_ClockConfig+0x1b4>)
 80015c2:	4a65      	ldr	r2, [pc, #404]	; (8001758 <HAL_RCC_ClockConfig+0x1b4>)
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	2101      	movs	r1, #1
 80015c8:	438a      	bics	r2, r1
 80015ca:	0011      	movs	r1, r2
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015d2:	4b61      	ldr	r3, [pc, #388]	; (8001758 <HAL_RCC_ClockConfig+0x1b4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	401a      	ands	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0b5      	b.n	8001750 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ee:	4a5b      	ldr	r2, [pc, #364]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	21f0      	movs	r1, #240	; 0xf0
 80015f6:	438b      	bics	r3, r1
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	430b      	orrs	r3, r1
 8001600:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	4013      	ands	r3, r2
 800160a:	d100      	bne.n	800160e <HAL_RCC_ClockConfig+0x6a>
 800160c:	e067      	b.n	80016de <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b51      	ldr	r3, [pc, #324]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	029b      	lsls	r3, r3, #10
 800161e:	4013      	ands	r3, r2
 8001620:	d114      	bne.n	800164c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e094      	b.n	8001750 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b4b      	ldr	r3, [pc, #300]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	049b      	lsls	r3, r3, #18
 8001636:	4013      	ands	r3, r2
 8001638:	d108      	bne.n	800164c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e088      	b.n	8001750 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e081      	b.n	8001750 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164c:	4a43      	ldr	r2, [pc, #268]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2103      	movs	r1, #3
 8001654:	438b      	bics	r3, r1
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	430b      	orrs	r3, r1
 800165e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001660:	f7fe ff04 	bl	800046c <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d111      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001670:	e009      	b.n	8001686 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001672:	f7fe fefb 	bl	800046c <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a38      	ldr	r2, [pc, #224]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e064      	b.n	8001750 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001686:	4b35      	ldr	r3, [pc, #212]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	220c      	movs	r2, #12
 800168c:	4013      	ands	r3, r2
 800168e:	2b04      	cmp	r3, #4
 8001690:	d1ef      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
 8001692:	e024      	b.n	80016de <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d11b      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169c:	e009      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169e:	f7fe fee5 	bl	800046c <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4a2d      	ldr	r2, [pc, #180]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e04e      	b.n	8001750 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b2:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	220c      	movs	r2, #12
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d1ef      	bne.n	800169e <HAL_RCC_ClockConfig+0xfa>
 80016be:	e00e      	b.n	80016de <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7fe fed4 	bl	800046c <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e03d      	b.n	8001750 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	220c      	movs	r2, #12
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <HAL_RCC_ClockConfig+0x1b4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	401a      	ands	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d911      	bls.n	8001710 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_ClockConfig+0x1b4>)
 80016ee:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_RCC_ClockConfig+0x1b4>)
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	2101      	movs	r1, #1
 80016f4:	438a      	bics	r2, r1
 80016f6:	0011      	movs	r1, r2
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_RCC_ClockConfig+0x1b4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	401a      	ands	r2, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e01f      	b.n	8001750 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d008      	beq.n	800172c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4910      	ldr	r1, [pc, #64]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 8001722:	4019      	ands	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	430b      	orrs	r3, r1
 800172a:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800172c:	f000 f820 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 8001730:	0001      	movs	r1, r0
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	220f      	movs	r2, #15
 800173a:	4013      	ands	r3, r2
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	000a      	movs	r2, r1
 8001742:	40da      	lsrs	r2, r3
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001746:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001748:	2000      	movs	r0, #0
 800174a:	f7fe fe67 	bl	800041c <HAL_InitTick>
  
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b004      	add	sp, #16
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40022000 	.word	0x40022000
 800175c:	40021000 	.word	0x40021000
 8001760:	00001388 	.word	0x00001388
 8001764:	fffff8ff 	.word	0xfffff8ff
 8001768:	08002584 	.word	0x08002584
 800176c:	20000000 	.word	0x20000000

08001770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b08f      	sub	sp, #60	; 0x3c
 8001774:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001776:	2314      	movs	r3, #20
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	4a28      	ldr	r2, [pc, #160]	; (800181c <HAL_RCC_GetSysClockFreq+0xac>)
 800177c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800177e:	c313      	stmia	r3!, {r0, r1, r4}
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001788:	ca13      	ldmia	r2!, {r0, r1, r4}
 800178a:	c313      	stmia	r3!, {r0, r1, r4}
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	220c      	movs	r2, #12
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d002      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x4a>
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d003      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x50>
 80017b8:	e027      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017be:	e027      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c2:	0c9b      	lsrs	r3, r3, #18
 80017c4:	220f      	movs	r2, #15
 80017c6:	4013      	ands	r3, r2
 80017c8:	2214      	movs	r2, #20
 80017ca:	18ba      	adds	r2, r7, r2
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	220f      	movs	r2, #15
 80017d6:	4013      	ands	r3, r2
 80017d8:	1d3a      	adds	r2, r7, #4
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	4013      	ands	r3, r2
 80017e6:	d009      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80017e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ec:	f7fe fc8c 	bl	8000108 <__udivsi3>
 80017f0:	0003      	movs	r3, r0
 80017f2:	001a      	movs	r2, r3
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	4353      	muls	r3, r2
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
 80017fa:	e003      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001800:	4353      	muls	r3, r2
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001808:	e002      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800180e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b00f      	add	sp, #60	; 0x3c
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	08002554 	.word	0x08002554
 8001820:	08002564 	.word	0x08002564
 8001824:	40021000 	.word	0x40021000
 8001828:	007a1200 	.word	0x007a1200
 800182c:	003d0900 	.word	0x003d0900

08001830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001834:	4b02      	ldr	r3, [pc, #8]	; (8001840 <HAL_RCC_GetHCLKFreq+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001848:	f7ff fff2 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 800184c:	0001      	movs	r1, r0
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	2207      	movs	r2, #7
 8001856:	4013      	ands	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_RCC_GetPCLK1Freq+0x28>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	40d9      	lsrs	r1, r3
 800185e:	000b      	movs	r3, r1
}    
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40021000 	.word	0x40021000
 800186c:	08002594 	.word	0x08002594

08001870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	025b      	lsls	r3, r3, #9
 8001888:	4013      	ands	r3, r2
 800188a:	d100      	bne.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800188c:	e08e      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2317      	movs	r3, #23
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	055b      	lsls	r3, r3, #21
 800189e:	4013      	ands	r3, r2
 80018a0:	d111      	bne.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a4:	4a53      	ldr	r2, [pc, #332]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a6:	69d2      	ldr	r2, [r2, #28]
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0549      	lsls	r1, r1, #21
 80018ac:	430a      	orrs	r2, r1
 80018ae:	61da      	str	r2, [r3, #28]
 80018b0:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018b2:	69da      	ldr	r2, [r3, #28]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	055b      	lsls	r3, r3, #21
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018be:	2317      	movs	r3, #23
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	d11a      	bne.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d2:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018d4:	4a48      	ldr	r2, [pc, #288]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0049      	lsls	r1, r1, #1
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e0:	f7fe fdc4 	bl	800046c <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	e008      	b.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7fe fdbf 	bl	800046c <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d901      	bls.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e076      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4013      	ands	r3, r2
 8001906:	d0f0      	beq.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001908:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	23c0      	movs	r3, #192	; 0xc0
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d034      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	23c0      	movs	r3, #192	; 0xc0
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	401a      	ands	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	429a      	cmp	r2, r3
 8001928:	d02c      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800192a:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a33      	ldr	r2, [pc, #204]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001936:	4a2f      	ldr	r2, [pc, #188]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001938:	6a12      	ldr	r2, [r2, #32]
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	0249      	lsls	r1, r1, #9
 800193e:	430a      	orrs	r2, r1
 8001940:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001944:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001946:	6a12      	ldr	r2, [r2, #32]
 8001948:	492d      	ldr	r1, [pc, #180]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800194a:	400a      	ands	r2, r1
 800194c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	4013      	ands	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7fe fd86 	bl	800046c <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	e009      	b.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7fe fd81 	bl	800046c <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e037      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	2202      	movs	r2, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d0f0      	beq.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	491c      	ldr	r1, [pc, #112]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800198c:	4019      	ands	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	430b      	orrs	r3, r1
 8001994:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001996:	2317      	movs	r3, #23
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019a4:	69d2      	ldr	r2, [r2, #28]
 80019a6:	4918      	ldr	r1, [pc, #96]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	d009      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	2103      	movs	r1, #3
 80019be:	438b      	bics	r3, r1
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	430b      	orrs	r3, r1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2220      	movs	r2, #32
 80019d0:	4013      	ands	r3, r2
 80019d2:	d009      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	2110      	movs	r1, #16
 80019dc:	438b      	bics	r3, r1
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b006      	add	sp, #24
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40007000 	.word	0x40007000
 80019fc:	fffffcff 	.word	0xfffffcff
 8001a00:	fffeffff 	.word	0xfffeffff
 8001a04:	00001388 	.word	0x00001388
 8001a08:	efffffff 	.word	0xefffffff

08001a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e047      	b.n	8001aae <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2269      	movs	r2, #105	; 0x69
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2268      	movs	r2, #104	; 0x68
 8001a2e:	2100      	movs	r1, #0
 8001a30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 fc97 	bl	8002368 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2269      	movs	r2, #105	; 0x69
 8001a3e:	2124      	movs	r1, #36	; 0x24
 8001a40:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	438a      	bics	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f000 f831 	bl	8001abc <UART_SetConfig>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e024      	b.n	8001aae <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f982 	bl	8001d78 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	6852      	ldr	r2, [r2, #4]
 8001a7e:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <HAL_UART_Init+0xac>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	6892      	ldr	r2, [r2, #8]
 8001a8e:	2108      	movs	r1, #8
 8001a90:	438a      	bics	r2, r1
 8001a92:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 fa12 	bl	8001ed0 <UART_CheckIdleState>
 8001aac:	0003      	movs	r3, r0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	fffff7ff 	.word	0xfffff7ff

08001abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001ac8:	2317      	movs	r3, #23
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2210      	movs	r2, #16
 8001ace:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001ad8:	2314      	movs	r3, #20
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	2200      	movs	r2, #0
 8001ade:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ae0:	2313      	movs	r3, #19
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	4995      	ldr	r1, [pc, #596]	; (8001d60 <UART_SetConfig+0x2a4>)
 8001b0c:	4011      	ands	r1, r2
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	6852      	ldr	r2, [r2, #4]
 8001b1e:	4991      	ldr	r1, [pc, #580]	; (8001d64 <UART_SetConfig+0x2a8>)
 8001b20:	4011      	ands	r1, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68d2      	ldr	r2, [r2, #12]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	6892      	ldr	r2, [r2, #8]
 8001b40:	4989      	ldr	r1, [pc, #548]	; (8001d68 <UART_SetConfig+0x2ac>)
 8001b42:	4011      	ands	r1, r2
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b4a:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <UART_SetConfig+0x2b0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	2203      	movs	r2, #3
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00f      	beq.n	8001b76 <UART_SetConfig+0xba>
 8001b56:	d304      	bcc.n	8001b62 <UART_SetConfig+0xa6>
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d011      	beq.n	8001b80 <UART_SetConfig+0xc4>
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d005      	beq.n	8001b6c <UART_SetConfig+0xb0>
 8001b60:	e013      	b.n	8001b8a <UART_SetConfig+0xce>
 8001b62:	2317      	movs	r3, #23
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e012      	b.n	8001b92 <UART_SetConfig+0xd6>
 8001b6c:	2317      	movs	r3, #23
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2202      	movs	r2, #2
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e00d      	b.n	8001b92 <UART_SetConfig+0xd6>
 8001b76:	2317      	movs	r3, #23
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e008      	b.n	8001b92 <UART_SetConfig+0xd6>
 8001b80:	2317      	movs	r3, #23
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2208      	movs	r2, #8
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e003      	b.n	8001b92 <UART_SetConfig+0xd6>
 8001b8a:	2317      	movs	r3, #23
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2210      	movs	r2, #16
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69da      	ldr	r2, [r3, #28]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d000      	beq.n	8001ba2 <UART_SetConfig+0xe6>
 8001ba0:	e07b      	b.n	8001c9a <UART_SetConfig+0x1de>
  {
    switch (clocksource)
 8001ba2:	2317      	movs	r3, #23
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d01c      	beq.n	8001be6 <UART_SetConfig+0x12a>
 8001bac:	dc02      	bgt.n	8001bb4 <UART_SetConfig+0xf8>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <UART_SetConfig+0x102>
 8001bb2:	e04f      	b.n	8001c54 <UART_SetConfig+0x198>
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d027      	beq.n	8001c08 <UART_SetConfig+0x14c>
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d039      	beq.n	8001c30 <UART_SetConfig+0x174>
 8001bbc:	e04a      	b.n	8001c54 <UART_SetConfig+0x198>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bbe:	f7ff fe41 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	005a      	lsls	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	18d2      	adds	r2, r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	0010      	movs	r0, r2
 8001bd6:	f7fe fa97 	bl	8000108 <__udivsi3>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	001a      	movs	r2, r3
 8001bde:	2314      	movs	r3, #20
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	801a      	strh	r2, [r3, #0]
        break;
 8001be4:	e03b      	b.n	8001c5e <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	4a60      	ldr	r2, [pc, #384]	; (8001d70 <UART_SetConfig+0x2b4>)
 8001bee:	189a      	adds	r2, r3, r2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	0010      	movs	r0, r2
 8001bf8:	f7fe fa86 	bl	8000108 <__udivsi3>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	001a      	movs	r2, r3
 8001c00:	2314      	movs	r3, #20
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	801a      	strh	r2, [r3, #0]
        break;
 8001c06:	e02a      	b.n	8001c5e <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c08:	f7ff fdb2 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	005a      	lsls	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	18d2      	adds	r2, r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	0010      	movs	r0, r2
 8001c20:	f7fe fa72 	bl	8000108 <__udivsi3>
 8001c24:	0003      	movs	r3, r0
 8001c26:	001a      	movs	r2, r3
 8001c28:	2314      	movs	r3, #20
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	801a      	strh	r2, [r3, #0]
        break;
 8001c2e:	e016      	b.n	8001c5e <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0252      	lsls	r2, r2, #9
 8001c3a:	189a      	adds	r2, r3, r2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0019      	movs	r1, r3
 8001c42:	0010      	movs	r0, r2
 8001c44:	f7fe fa60 	bl	8000108 <__udivsi3>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2314      	movs	r3, #20
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	801a      	strh	r2, [r3, #0]
        break;
 8001c52:	e004      	b.n	8001c5e <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001c54:	2313      	movs	r3, #19
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
        break;
 8001c5c:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2214      	movs	r2, #20
 8001c64:	18ba      	adds	r2, r7, r2
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	210f      	movs	r1, #15
 8001c6a:	438a      	bics	r2, r1
 8001c6c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c6e:	2314      	movs	r3, #20
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	105b      	asrs	r3, r3, #1
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2207      	movs	r2, #7
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	230a      	movs	r3, #10
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	220a      	movs	r2, #10
 8001c84:	18ba      	adds	r2, r7, r2
 8001c86:	8812      	ldrh	r2, [r2, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	220a      	movs	r2, #10
 8001c92:	18ba      	adds	r2, r7, r2
 8001c94:	8812      	ldrh	r2, [r2, #0]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	e05b      	b.n	8001d52 <UART_SetConfig+0x296>
  }
  else
  {
    switch (clocksource)
 8001c9a:	2317      	movs	r3, #23
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d01b      	beq.n	8001cdc <UART_SetConfig+0x220>
 8001ca4:	dc02      	bgt.n	8001cac <UART_SetConfig+0x1f0>
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <UART_SetConfig+0x1fa>
 8001caa:	e04d      	b.n	8001d48 <UART_SetConfig+0x28c>
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d026      	beq.n	8001cfe <UART_SetConfig+0x242>
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d037      	beq.n	8001d24 <UART_SetConfig+0x268>
 8001cb4:	e048      	b.n	8001d48 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	f7ff fdc3 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	18d2      	adds	r2, r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	0019      	movs	r1, r3
 8001cce:	0010      	movs	r0, r2
 8001cd0:	f7fe fa1a 	bl	8000108 <__udivsi3>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	60e3      	str	r3, [r4, #12]
        break;
 8001cda:	e03a      	b.n	8001d52 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681c      	ldr	r4, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <UART_SetConfig+0x2b8>)
 8001ce8:	189a      	adds	r2, r3, r2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0019      	movs	r1, r3
 8001cf0:	0010      	movs	r0, r2
 8001cf2:	f7fe fa09 	bl	8000108 <__udivsi3>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	60e3      	str	r3, [r4, #12]
        break;
 8001cfc:	e029      	b.n	8001d52 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681c      	ldr	r4, [r3, #0]
 8001d02:	f7ff fd35 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 8001d06:	0002      	movs	r2, r0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	18d2      	adds	r2, r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0019      	movs	r1, r3
 8001d16:	0010      	movs	r0, r2
 8001d18:	f7fe f9f6 	bl	8000108 <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	60e3      	str	r3, [r4, #12]
        break;
 8001d22:	e016      	b.n	8001d52 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681c      	ldr	r4, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	0212      	lsls	r2, r2, #8
 8001d32:	189a      	adds	r2, r3, r2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0019      	movs	r1, r3
 8001d3a:	0010      	movs	r0, r2
 8001d3c:	f7fe f9e4 	bl	8000108 <__udivsi3>
 8001d40:	0003      	movs	r3, r0
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	60e3      	str	r3, [r4, #12]
        break;
 8001d46:	e004      	b.n	8001d52 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001d48:	2313      	movs	r3, #19
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
        break;
 8001d50:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001d52:	2313      	movs	r3, #19
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	781b      	ldrb	r3, [r3, #0]

}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b007      	add	sp, #28
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	ffff69f3 	.word	0xffff69f3
 8001d64:	ffffcfff 	.word	0xffffcfff
 8001d68:	fffff4ff 	.word	0xfffff4ff
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d00a      	beq.n	8001da0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	6852      	ldr	r2, [r2, #4]
 8001d94:	4945      	ldr	r1, [pc, #276]	; (8001eac <UART_AdvFeatureConfig+0x134>)
 8001d96:	4011      	ands	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d00a      	beq.n	8001dc0 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	6852      	ldr	r2, [r2, #4]
 8001db4:	493e      	ldr	r1, [pc, #248]	; (8001eb0 <UART_AdvFeatureConfig+0x138>)
 8001db6:	4011      	ands	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d00a      	beq.n	8001de0 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	6852      	ldr	r2, [r2, #4]
 8001dd4:	4937      	ldr	r1, [pc, #220]	; (8001eb4 <UART_AdvFeatureConfig+0x13c>)
 8001dd6:	4011      	ands	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	2208      	movs	r2, #8
 8001de6:	4013      	ands	r3, r2
 8001de8:	d00a      	beq.n	8001e00 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	6852      	ldr	r2, [r2, #4]
 8001df4:	4930      	ldr	r1, [pc, #192]	; (8001eb8 <UART_AdvFeatureConfig+0x140>)
 8001df6:	4011      	ands	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	2210      	movs	r2, #16
 8001e06:	4013      	ands	r3, r2
 8001e08:	d00a      	beq.n	8001e20 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	6892      	ldr	r2, [r2, #8]
 8001e14:	4929      	ldr	r1, [pc, #164]	; (8001ebc <UART_AdvFeatureConfig+0x144>)
 8001e16:	4011      	ands	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2220      	movs	r2, #32
 8001e26:	4013      	ands	r3, r2
 8001e28:	d00a      	beq.n	8001e40 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	6892      	ldr	r2, [r2, #8]
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <UART_AdvFeatureConfig+0x148>)
 8001e36:	4011      	ands	r1, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	4013      	ands	r3, r2
 8001e48:	d01b      	beq.n	8001e82 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	6852      	ldr	r2, [r2, #4]
 8001e54:	491b      	ldr	r1, [pc, #108]	; (8001ec4 <UART_AdvFeatureConfig+0x14c>)
 8001e56:	4011      	ands	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	035b      	lsls	r3, r3, #13
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10a      	bne.n	8001e82 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	6852      	ldr	r2, [r2, #4]
 8001e76:	4914      	ldr	r1, [pc, #80]	; (8001ec8 <UART_AdvFeatureConfig+0x150>)
 8001e78:	4011      	ands	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d00a      	beq.n	8001ea2 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	6852      	ldr	r2, [r2, #4]
 8001e96:	490d      	ldr	r1, [pc, #52]	; (8001ecc <UART_AdvFeatureConfig+0x154>)
 8001e98:	4011      	ands	r1, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]
  }
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	fffdffff 	.word	0xfffdffff
 8001eb0:	fffeffff 	.word	0xfffeffff
 8001eb4:	fffbffff 	.word	0xfffbffff
 8001eb8:	ffff7fff 	.word	0xffff7fff
 8001ebc:	ffffefff 	.word	0xffffefff
 8001ec0:	ffffdfff 	.word	0xffffdfff
 8001ec4:	ffefffff 	.word	0xffefffff
 8001ec8:	ff9fffff 	.word	0xff9fffff
 8001ecc:	fff7ffff 	.word	0xfff7ffff

08001ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2269      	movs	r2, #105	; 0x69
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	226a      	movs	r2, #106	; 0x6a
 8001eea:	2120      	movs	r1, #32
 8001eec:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2268      	movs	r2, #104	; 0x68
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b002      	add	sp, #8
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <int_to_string>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void int_to_string(int value, char* str, int size) {
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	for(int i = size-1; i >= 0; i--) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	e016      	b.n	8001f42 <int_to_string+0x42>
		str[i] ='0' + value%10;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	18d4      	adds	r4, r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	210a      	movs	r1, #10
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7fe fa62 	bl	80003e8 <__aeabi_idivmod>
 8001f24:	000b      	movs	r3, r1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3330      	adds	r3, #48	; 0x30
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	7023      	strb	r3, [r4, #0]
		value /= 10;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	210a      	movs	r1, #10
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7fe f972 	bl	800021c <__divsi3>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]
	for(int i = size-1; i >= 0; i--) {
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dae5      	bge.n	8001f14 <int_to_string+0x14>
	}
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b007      	add	sp, #28
 8001f4e:	bd90      	pop	{r4, r7, pc}

08001f50 <strcopy>:
void strcopy(char* destination, char* source, int begin, int end) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
	for(int i = begin; i <= end; i++) {
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e00d      	b.n	8001f80 <strcopy+0x30>
		destination[i] = source[i-begin];
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	18d3      	adds	r3, r2, r3
 8001f6a:	6979      	ldr	r1, [r7, #20]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	1a8a      	subs	r2, r1, r2
 8001f70:	0011      	movs	r1, r2
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	1852      	adds	r2, r2, r1
 8001f76:	7812      	ldrb	r2, [r2, #0]
 8001f78:	701a      	strb	r2, [r3, #0]
	for(int i = begin; i <= end; i++) {
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dded      	ble.n	8001f64 <strcopy+0x14>
	}
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b006      	add	sp, #24
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <main>:
/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b090      	sub	sp, #64	; 0x40
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f96:	f7fe fa2d 	bl	80003f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9a:	f000 f82b 	bl	8001ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f9e:	f000 f92d 	bl	80021fc <MX_GPIO_Init>
  MX_ADC_Init();
 8001fa2:	f000 f899 	bl	80020d8 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8001fa6:	f000 f8f3 	bl	8002190 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

  /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8001faa:	23fa      	movs	r3, #250	; 0xfa
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7fe fa66 	bl	8000480 <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <main+0x60>)
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7fe fbbe 	bl	8000738 <HAL_ADC_Start>
	  value = HAL_ADC_GetValue(&hadc);
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <main+0x60>)
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7fe fc0e 	bl	80007e0 <HAL_ADC_GetValue>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_Delay(1000);
 8001fc8:	23fa      	movs	r3, #250	; 0xfa
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7fe fa57 	bl	8000480 <HAL_Delay>
  /* USER CODE BEGIN 3 */
	  //Add this value to the message
	  int_to_string(value, valueStr, 4);
 8001fd2:	1d39      	adds	r1, r7, #4
 8001fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff ff91 	bl	8001f00 <int_to_string>
	  strcopy(msg, valueStr, 44, 47);
 8001fde:	1d39      	adds	r1, r7, #4
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	18f8      	adds	r0, r7, r3
 8001fe4:	232f      	movs	r3, #47	; 0x2f
 8001fe6:	222c      	movs	r2, #44	; 0x2c
 8001fe8:	f7ff ffb2 	bl	8001f50 <strcopy>
	  HAL_Delay(1000);
 8001fec:	e7dd      	b.n	8001faa <main+0x1a>
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	20000094 	.word	0x20000094

08001ff4 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b094      	sub	sp, #80	; 0x50
 8001ff8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2212      	movs	r2, #18
 8002000:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002002:	2320      	movs	r3, #32
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2201      	movs	r2, #1
 8002008:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800200a:	2320      	movs	r3, #32
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2201      	movs	r2, #1
 8002010:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002012:	2320      	movs	r3, #32
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2210      	movs	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800201a:	2320      	movs	r3, #32
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	2210      	movs	r2, #16
 8002020:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002022:	2320      	movs	r3, #32
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202a:	2320      	movs	r3, #32
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	0018      	movs	r0, r3
 8002030:	f7fe ffc4 	bl	8000fbc <HAL_RCC_OscConfig>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d004      	beq.n	8002042 <SystemClock_Config+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <SystemClock_Config+0xe0>)
 800203a:	219b      	movs	r1, #155	; 0x9b
 800203c:	0018      	movs	r0, r3
 800203e:	f000 f921 	bl	8002284 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002042:	2310      	movs	r3, #16
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	2207      	movs	r2, #7
 8002048:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800204a:	2310      	movs	r3, #16
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	2310      	movs	r3, #16
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800205a:	2310      	movs	r3, #16
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002062:	2310      	movs	r3, #16
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2100      	movs	r1, #0
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff fa9b 	bl	80015a4 <HAL_RCC_ClockConfig>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d004      	beq.n	800207c <SystemClock_Config+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <SystemClock_Config+0xe0>)
 8002074:	21a8      	movs	r1, #168	; 0xa8
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f904 	bl	8002284 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800207c:	003b      	movs	r3, r7
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002082:	003b      	movs	r3, r7
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002088:	003b      	movs	r3, r7
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff fbf0 	bl	8001870 <HAL_RCCEx_PeriphCLKConfig>
 8002090:	1e03      	subs	r3, r0, #0
 8002092:	d004      	beq.n	800209e <SystemClock_Config+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <SystemClock_Config+0xe0>)
 8002096:	21af      	movs	r1, #175	; 0xaf
 8002098:	0018      	movs	r0, r3
 800209a:	f000 f8f3 	bl	8002284 <_Error_Handler>
  }


    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800209e:	f7ff fbc7 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 80020a2:	0002      	movs	r2, r0
 80020a4:	23fa      	movs	r3, #250	; 0xfa
 80020a6:	0099      	lsls	r1, r3, #2
 80020a8:	0010      	movs	r0, r2
 80020aa:	f7fe f82d 	bl	8000108 <__udivsi3>
 80020ae:	0003      	movs	r3, r0
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7fe fdbd 	bl	8000c30 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020b6:	2004      	movs	r0, #4
 80020b8:	f7fe fdc8 	bl	8000c4c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020bc:	2301      	movs	r3, #1
 80020be:	425b      	negs	r3, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7fe fd9d 	bl	8000c04 <HAL_NVIC_SetPriority>
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b014      	add	sp, #80	; 0x50
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	08002574 	.word	0x08002574

080020d8 <MX_ADC_Init>:

/* ADC init function */
static void MX_ADC_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <MX_ADC_Init+0xac>)
 80020e0:	4a29      	ldr	r2, [pc, #164]	; (8002188 <MX_ADC_Init+0xb0>)
 80020e2:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <MX_ADC_Init+0xac>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <MX_ADC_Init+0xac>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <MX_ADC_Init+0xac>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <MX_ADC_Init+0xac>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <MX_ADC_Init+0xac>)
 80020fe:	2204      	movs	r2, #4
 8002100:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <MX_ADC_Init+0xac>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <MX_ADC_Init+0xac>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <MX_ADC_Init+0xac>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_ADC_Init+0xac>)
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_ADC_Init+0xac>)
 800211c:	22c2      	movs	r2, #194	; 0xc2
 800211e:	32ff      	adds	r2, #255	; 0xff
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_ADC_Init+0xac>)
 8002124:	2200      	movs	r2, #0
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_ADC_Init+0xac>)
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_ADC_Init+0xac>)
 8002130:	2201      	movs	r2, #1
 8002132:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_ADC_Init+0xac>)
 8002136:	0018      	movs	r0, r3
 8002138:	f7fe f9c0 	bl	80004bc <HAL_ADC_Init>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d004      	beq.n	800214a <MX_ADC_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <MX_ADC_Init+0xb4>)
 8002142:	21d7      	movs	r1, #215	; 0xd7
 8002144:	0018      	movs	r0, r3
 8002146:	f000 f89d 	bl	8002284 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2280      	movs	r2, #128	; 0x80
 8002154:	0152      	lsls	r2, r2, #5
 8002156:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	0552      	lsls	r2, r2, #21
 800215e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002160:	1d3a      	adds	r2, r7, #4
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_ADC_Init+0xac>)
 8002164:	0011      	movs	r1, r2
 8002166:	0018      	movs	r0, r3
 8002168:	f7fe fb46 	bl	80007f8 <HAL_ADC_ConfigChannel>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d004      	beq.n	800217a <MX_ADC_Init+0xa2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_ADC_Init+0xb4>)
 8002172:	21e1      	movs	r1, #225	; 0xe1
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f885 	bl	8002284 <_Error_Handler>
  }

}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b004      	add	sp, #16
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	20000094 	.word	0x20000094
 8002188:	40012400 	.word	0x40012400
 800218c:	08002574 	.word	0x08002574

08002190 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <MX_USART1_UART_Init+0x64>)
 8002198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 800219c:	2296      	movs	r2, #150	; 0x96
 800219e:	0212      	lsls	r2, r2, #8
 80021a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021b6:	220c      	movs	r2, #12
 80021b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <MX_USART1_UART_Init+0x60>)
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff fc19 	bl	8001a0c <HAL_UART_Init>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d004      	beq.n	80021e8 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART1_UART_Init+0x68>)
 80021e0:	21f6      	movs	r1, #246	; 0xf6
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 f84e 	bl	8002284 <_Error_Handler>
  }

}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	20000024 	.word	0x20000024
 80021f4:	40013800 	.word	0x40013800
 80021f8:	08002574 	.word	0x08002574

080021fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <MX_GPIO_Init+0x80>)
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <MX_GPIO_Init+0x80>)
 8002206:	6952      	ldr	r2, [r2, #20]
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0289      	lsls	r1, r1, #10
 800220c:	430a      	orrs	r2, r1
 800220e:	615a      	str	r2, [r3, #20]
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <MX_GPIO_Init+0x80>)
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	029b      	lsls	r3, r3, #10
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <MX_GPIO_Init+0x80>)
 8002220:	4a16      	ldr	r2, [pc, #88]	; (800227c <MX_GPIO_Init+0x80>)
 8002222:	6952      	ldr	r2, [r2, #20]
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	02c9      	lsls	r1, r1, #11
 8002228:	430a      	orrs	r2, r1
 800222a:	615a      	str	r2, [r3, #20]
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <MX_GPIO_Init+0x80>)
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	02db      	lsls	r3, r3, #11
 8002234:	4013      	ands	r3, r2
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <MX_GPIO_Init+0x84>)
 800223c:	2200      	movs	r2, #0
 800223e:	2102      	movs	r1, #2
 8002240:	0018      	movs	r0, r3
 8002242:	f7fe fe9d 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002246:	230c      	movs	r3, #12
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2202      	movs	r2, #2
 800224c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	230c      	movs	r3, #12
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2201      	movs	r2, #1
 8002254:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	230c      	movs	r3, #12
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	230c      	movs	r3, #12
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	230c      	movs	r3, #12
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <MX_GPIO_Init+0x84>)
 800226c:	0019      	movs	r1, r3
 800226e:	0010      	movs	r0, r2
 8002270:	f7fe fd12 	bl	8000c98 <HAL_GPIO_Init>

}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b008      	add	sp, #32
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	48000400 	.word	0x48000400

08002284 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1){
 800228e:	e7fe      	b.n	800228e <_Error_Handler+0xa>

08002290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_MspInit+0x6c>)
 8002298:	4a18      	ldr	r2, [pc, #96]	; (80022fc <HAL_MspInit+0x6c>)
 800229a:	6992      	ldr	r2, [r2, #24]
 800229c:	2101      	movs	r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	619a      	str	r2, [r3, #24]
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_MspInit+0x6c>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2201      	movs	r2, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_MspInit+0x6c>)
 80022b0:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_MspInit+0x6c>)
 80022b2:	69d2      	ldr	r2, [r2, #28]
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0549      	lsls	r1, r1, #21
 80022b8:	430a      	orrs	r2, r1
 80022ba:	61da      	str	r2, [r3, #28]
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_MspInit+0x6c>)
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4013      	ands	r3, r2
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80022ca:	2305      	movs	r3, #5
 80022cc:	425b      	negs	r3, r3
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fe fc96 	bl	8000c04 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80022d8:	2302      	movs	r3, #2
 80022da:	425b      	negs	r3, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe fc8f 	bl	8000c04 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80022e6:	2301      	movs	r3, #1
 80022e8:	425b      	negs	r3, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fe fc88 	bl	8000c04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_ADC_MspInit+0x60>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d121      	bne.n	8002356 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_ADC_MspInit+0x64>)
 8002314:	4a13      	ldr	r2, [pc, #76]	; (8002364 <HAL_ADC_MspInit+0x64>)
 8002316:	6992      	ldr	r2, [r2, #24]
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0089      	lsls	r1, r1, #2
 800231c:	430a      	orrs	r2, r1
 800231e:	619a      	str	r2, [r3, #24]
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_ADC_MspInit+0x64>)
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4013      	ands	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800232e:	230c      	movs	r3, #12
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002336:	230c      	movs	r3, #12
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2203      	movs	r2, #3
 800233c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	230c      	movs	r3, #12
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	230c      	movs	r3, #12
 8002348:	18fa      	adds	r2, r7, r3
 800234a:	2390      	movs	r3, #144	; 0x90
 800234c:	05db      	lsls	r3, r3, #23
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f7fe fca1 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b008      	add	sp, #32
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	40012400 	.word	0x40012400
 8002364:	40021000 	.word	0x40021000

08002368 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_UART_MspInit+0x70>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d129      	bne.n	80023ce <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_UART_MspInit+0x74>)
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_UART_MspInit+0x74>)
 800237e:	6992      	ldr	r2, [r2, #24]
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	01c9      	lsls	r1, r1, #7
 8002384:	430a      	orrs	r2, r1
 8002386:	619a      	str	r2, [r3, #24]
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_UART_MspInit+0x74>)
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	01db      	lsls	r3, r3, #7
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002396:	230c      	movs	r3, #12
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	230c      	movs	r3, #12
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2202      	movs	r2, #2
 80023a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	230c      	movs	r3, #12
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ae:	230c      	movs	r3, #12
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2203      	movs	r2, #3
 80023b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80023b6:	230c      	movs	r3, #12
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2201      	movs	r2, #1
 80023bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	230c      	movs	r3, #12
 80023c0:	18fa      	adds	r2, r7, r3
 80023c2:	2390      	movs	r3, #144	; 0x90
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7fe fc65 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b008      	add	sp, #32
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40021000 	.word	0x40021000

080023e0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002408:	f7fe f824 	bl	8000454 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800240c:	f7fe fc38 	bl	8000c80 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <SystemInit+0x70>)
 800241e:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <SystemInit+0x70>)
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	2101      	movs	r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <SystemInit+0x70>)
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <SystemInit+0x70>)
 800242c:	6852      	ldr	r2, [r2, #4]
 800242e:	4917      	ldr	r1, [pc, #92]	; (800248c <SystemInit+0x74>)
 8002430:	400a      	ands	r2, r1
 8002432:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <SystemInit+0x70>)
 8002436:	4a14      	ldr	r2, [pc, #80]	; (8002488 <SystemInit+0x70>)
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4915      	ldr	r1, [pc, #84]	; (8002490 <SystemInit+0x78>)
 800243c:	400a      	ands	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <SystemInit+0x70>)
 8002442:	4a11      	ldr	r2, [pc, #68]	; (8002488 <SystemInit+0x70>)
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	4913      	ldr	r1, [pc, #76]	; (8002494 <SystemInit+0x7c>)
 8002448:	400a      	ands	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <SystemInit+0x70>)
 800244e:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <SystemInit+0x70>)
 8002450:	6852      	ldr	r2, [r2, #4]
 8002452:	4911      	ldr	r1, [pc, #68]	; (8002498 <SystemInit+0x80>)
 8002454:	400a      	ands	r2, r1
 8002456:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <SystemInit+0x70>)
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <SystemInit+0x70>)
 800245c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800245e:	210f      	movs	r1, #15
 8002460:	438a      	bics	r2, r1
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <SystemInit+0x70>)
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <SystemInit+0x70>)
 8002468:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800246a:	490c      	ldr	r1, [pc, #48]	; (800249c <SystemInit+0x84>)
 800246c:	400a      	ands	r2, r1
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <SystemInit+0x70>)
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <SystemInit+0x70>)
 8002474:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800247c:	4b02      	ldr	r3, [pc, #8]	; (8002488 <SystemInit+0x70>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]

}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	08ffb80c 	.word	0x08ffb80c
 8002490:	fef6ffff 	.word	0xfef6ffff
 8002494:	fffbffff 	.word	0xfffbffff
 8002498:	ffc0ffff 	.word	0xffc0ffff
 800249c:	fffffeec 	.word	0xfffffeec

080024a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024a0:	480d      	ldr	r0, [pc, #52]	; (80024d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <LoopForever+0x6>)
  ldr r1, =_edata
 80024a6:	490e      	ldr	r1, [pc, #56]	; (80024e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a8:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <LoopForever+0xe>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024bc:	4c0b      	ldr	r4, [pc, #44]	; (80024ec <LoopForever+0x16>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024ca:	f7ff ffa5 	bl	8002418 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80024ce:	f000 f811 	bl	80024f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024d2:	f7ff fd5d 	bl	8001f90 <main>

080024d6 <LoopForever>:

LoopForever:
    b LoopForever
 80024d6:	e7fe      	b.n	80024d6 <LoopForever>
  ldr   r0, =_estack
 80024d8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80024e4:	080025a4 	.word	0x080025a4
  ldr r2, =_sbss
 80024e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80024ec:	200000e0 	.word	0x200000e0

080024f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC1_IRQHandler>
	...

080024f4 <__libc_init_array>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	2600      	movs	r6, #0
 80024f8:	4d0c      	ldr	r5, [pc, #48]	; (800252c <__libc_init_array+0x38>)
 80024fa:	4c0d      	ldr	r4, [pc, #52]	; (8002530 <__libc_init_array+0x3c>)
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	42a6      	cmp	r6, r4
 8002502:	d109      	bne.n	8002518 <__libc_init_array+0x24>
 8002504:	2600      	movs	r6, #0
 8002506:	f000 f819 	bl	800253c <_init>
 800250a:	4d0a      	ldr	r5, [pc, #40]	; (8002534 <__libc_init_array+0x40>)
 800250c:	4c0a      	ldr	r4, [pc, #40]	; (8002538 <__libc_init_array+0x44>)
 800250e:	1b64      	subs	r4, r4, r5
 8002510:	10a4      	asrs	r4, r4, #2
 8002512:	42a6      	cmp	r6, r4
 8002514:	d105      	bne.n	8002522 <__libc_init_array+0x2e>
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	00b3      	lsls	r3, r6, #2
 800251a:	58eb      	ldr	r3, [r5, r3]
 800251c:	4798      	blx	r3
 800251e:	3601      	adds	r6, #1
 8002520:	e7ee      	b.n	8002500 <__libc_init_array+0xc>
 8002522:	00b3      	lsls	r3, r6, #2
 8002524:	58eb      	ldr	r3, [r5, r3]
 8002526:	4798      	blx	r3
 8002528:	3601      	adds	r6, #1
 800252a:	e7f2      	b.n	8002512 <__libc_init_array+0x1e>
 800252c:	0800259c 	.word	0x0800259c
 8002530:	0800259c 	.word	0x0800259c
 8002534:	0800259c 	.word	0x0800259c
 8002538:	080025a0 	.word	0x080025a0

0800253c <_init>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr

08002548 <_fini>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr
